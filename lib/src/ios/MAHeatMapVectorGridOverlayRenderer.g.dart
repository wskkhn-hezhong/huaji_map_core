// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:huaji_map_core/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';
import 'package:amap_core_fluttify/amap_core_fluttify.dart';
import 'package:amap_search_fluttify/amap_search_fluttify.dart';
import 'package:amap_location_fluttify/amap_location_fluttify.dart';

class MAHeatMapVectorGridOverlayRenderer extends MAOverlayRenderer  {
  //region constants
  static const String name__ = 'MAHeatMapVectorGridOverlayRenderer';

  @override
  final String tag__ = 'huaji_map_core';

  
  //endregion

  //region creators
  static Future<MAHeatMapVectorGridOverlayRenderer> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createMAHeatMapVectorGridOverlayRenderer',
      {'init': init}
    );
    return AmapMapFluttifyIOSAs<MAHeatMapVectorGridOverlayRenderer>(__result__)!;
  }
  
  static Future<List<MAHeatMapVectorGridOverlayRenderer>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchMAHeatMapVectorGridOverlayRenderer',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => AmapMapFluttifyIOSAs<MAHeatMapVectorGridOverlayRenderer>(it))
        .where((element) => element !=null)
        .cast<MAHeatMapVectorGridOverlayRenderer>()
        .toList() ?? <MAHeatMapVectorGridOverlayRenderer>[];
  }
  
  //endregion

  //region getters
  Future<MAHeatMapVectorGridOverlay?> get_heatOverlay() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayRenderer::get_heatOverlay", {'__this__': this});
    return AmapMapFluttifyIOSAs<MAHeatMapVectorGridOverlay>(__result__);
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<MAHeatMapVectorGridOverlayRenderer?> initWithHeatOverlay(MAHeatMapVectorGridOverlay? heatOverlay) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: MAHeatMapVectorGridOverlayRenderer@$refId::initWithHeatOverlay([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayRenderer::initWithHeatOverlay', {"heatOverlay": heatOverlay, "__this__": this});
  
  
    // handle native call
  
  
    return AmapMapFluttifyIOSAs<MAHeatMapVectorGridOverlayRenderer>(__result__);
  }
  
  //endregion

  @override
  String toString() {
    return 'MAHeatMapVectorGridOverlayRenderer{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension MAHeatMapVectorGridOverlayRenderer_Batch on List<MAHeatMapVectorGridOverlayRenderer?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  Future<List<MAHeatMapVectorGridOverlay?>> get_heatOverlay_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayRenderer::get_heatOverlay_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => AmapMapFluttifyIOSAs<MAHeatMapVectorGridOverlay>(__result__)).cast<MAHeatMapVectorGridOverlay?>().toList();
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<MAHeatMapVectorGridOverlayRenderer?>> initWithHeatOverlay_batch(List<MAHeatMapVectorGridOverlay?> heatOverlay) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayRenderer::initWithHeatOverlay_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"heatOverlay": heatOverlay[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => AmapMapFluttifyIOSAs<MAHeatMapVectorGridOverlayRenderer>(__result__)).cast<MAHeatMapVectorGridOverlayRenderer?>().toList();
  }
  
  //endregion
}
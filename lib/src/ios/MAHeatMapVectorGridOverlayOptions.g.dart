// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:huaji_map_core/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';
import 'package:amap_core_fluttify/amap_core_fluttify.dart';
import 'package:amap_search_fluttify/amap_search_fluttify.dart';
import 'package:amap_location_fluttify/amap_location_fluttify.dart';

class MAHeatMapVectorGridOverlayOptions extends NSObject  {
  //region constants
  static const String name__ = 'MAHeatMapVectorGridOverlayOptions';

  @override
  final String tag__ = 'huaji_map_core';

  
  //endregion

  //region creators
  static Future<MAHeatMapVectorGridOverlayOptions> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createMAHeatMapVectorGridOverlayOptions',
      {'init': init}
    );
    return AmapMapFluttifyIOSAs<MAHeatMapVectorGridOverlayOptions>(__result__)!;
  }
  
  static Future<List<MAHeatMapVectorGridOverlayOptions>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchMAHeatMapVectorGridOverlayOptions',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => AmapMapFluttifyIOSAs<MAHeatMapVectorGridOverlayOptions>(it))
        .where((element) => element !=null)
        .cast<MAHeatMapVectorGridOverlayOptions>()
        .toList() ?? <MAHeatMapVectorGridOverlayOptions>[];
  }
  
  //endregion

  //region getters
  Future<MAHeatMapType?> get_type() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayOptions::get_type", {'__this__': this});
    return (__result__ as int).toMAHeatMapType();
  }
  
  Future<bool?> get_visible() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayOptions::get_visible", {'__this__': this});
    return __result__;
  }
  
  Future<List<MAHeatMapVectorGrid>?> get_inputGrids() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayOptions::get_inputGrids", {'__this__': this});
    return (__result__ as List?)?.map((it) => AmapMapFluttifyIOSAs<MAHeatMapVectorGrid>(it)).where((e) => e != null).cast<MAHeatMapVectorGrid>().toList();
  }
  
  Future<double?> get_minZoom() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayOptions::get_minZoom", {'__this__': this});
    return __result__;
  }
  
  Future<double?> get_maxZoom() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayOptions::get_maxZoom", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_type(MAHeatMapType? type) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayOptions::set_type', <String, dynamic>{'__this__': this, "type": type?.toValue()});
  }
  
  Future<void> set_visible(bool? visible) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayOptions::set_visible', <String, dynamic>{'__this__': this, "visible": visible});
  }
  
  Future<void> set_inputGrids(List<MAHeatMapVectorGrid>? inputGrids) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayOptions::set_inputGrids', <String, dynamic>{'__this__': this, "inputGrids": inputGrids});
  }
  
  Future<void> set_minZoom(double? minZoom) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayOptions::set_minZoom', <String, dynamic>{'__this__': this, "minZoom": minZoom});
  }
  
  Future<void> set_maxZoom(double? maxZoom) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayOptions::set_maxZoom', <String, dynamic>{'__this__': this, "maxZoom": maxZoom});
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'MAHeatMapVectorGridOverlayOptions{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension MAHeatMapVectorGridOverlayOptions_Batch on List<MAHeatMapVectorGridOverlayOptions?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  Future<List<MAHeatMapType?>> get_type_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayOptions::get_type_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toMAHeatMapType()).cast<MAHeatMapType?>().toList();
  }
  
  Future<List<bool?>> get_visible_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayOptions::get_visible_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  Future<List<List<MAHeatMapVectorGrid>?>> get_inputGrids_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayOptions::get_inputGrids_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as List?)?.map((it) => AmapMapFluttifyIOSAs<MAHeatMapVectorGrid>(it)).where((e) => e != null).cast<MAHeatMapVectorGrid>().toList()).cast<List<MAHeatMapVectorGrid>?>().toList();
  }
  
  Future<List<double?>> get_minZoom_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayOptions::get_minZoom_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<double?>().toList();
  }
  
  Future<List<double?>> get_maxZoom_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorGridOverlayOptions::get_maxZoom_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<double?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_type_batch(List<MAHeatMapType?> type) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayOptions::set_type_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "type": type[__i__]?.toValue()}]);
  
  
  }
  
  Future<void> set_visible_batch(List<bool?> visible) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayOptions::set_visible_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "visible": visible[__i__]}]);
  
  
  }
  
  Future<void> set_inputGrids_batch(List<List<MAHeatMapVectorGrid>?> inputGrids) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayOptions::set_inputGrids_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "inputGrids": inputGrids[__i__]}]);
  
  
  }
  
  Future<void> set_minZoom_batch(List<double?> minZoom) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayOptions::set_minZoom_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "minZoom": minZoom[__i__]}]);
  
  
  }
  
  Future<void> set_maxZoom_batch(List<double?> maxZoom) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorGridOverlayOptions::set_maxZoom_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "maxZoom": maxZoom[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}
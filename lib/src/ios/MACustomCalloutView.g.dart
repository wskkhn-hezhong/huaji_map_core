// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:huaji_map_core/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';
import 'package:amap_core_fluttify/amap_core_fluttify.dart';
import 'package:amap_search_fluttify/amap_search_fluttify.dart';
import 'package:amap_location_fluttify/amap_location_fluttify.dart';

class MACustomCalloutView extends UIView  {
  //region constants
  static const String name__ = 'MACustomCalloutView';

  @override
  final String tag__ = 'huaji_map_core';

  
  //endregion

  //region creators
  static Future<MACustomCalloutView> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createMACustomCalloutView',
      {'init': init}
    );
    return AmapMapFluttifyIOSAs<MACustomCalloutView>(__result__)!;
  }
  
  static Future<List<MACustomCalloutView>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchMACustomCalloutView',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => AmapMapFluttifyIOSAs<MACustomCalloutView>(it))
        .where((element) => element !=null)
        .cast<MACustomCalloutView>()
        .toList() ?? <MACustomCalloutView>[];
  }
  
  //endregion

  //region getters
  Future<UIView?> get_customView() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MACustomCalloutView::get_customView", {'__this__': this});
    return AmapMapFluttifyIOSAs<UIView>(__result__);
  }
  
  Future<dynamic> get_userData() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MACustomCalloutView::get_userData", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_userData(dynamic userData) async {
    await kAmapMapFluttifyChannel.invokeMethod('MACustomCalloutView::set_userData', <String, dynamic>{'__this__': this, "userData": userData});
  }
  
  //endregion

  //region methods
  
  Future<dynamic> initWithCustomView(UIView? customView) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: MACustomCalloutView@$refId::initWithCustomView([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('MACustomCalloutView::initWithCustomView', {"customView": customView, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'MACustomCalloutView{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension MACustomCalloutView_Batch on List<MACustomCalloutView?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  Future<List<UIView?>> get_customView_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MACustomCalloutView::get_customView_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => AmapMapFluttifyIOSAs<UIView>(__result__)).cast<UIView?>().toList();
  }
  
  Future<List<dynamic>> get_userData_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MACustomCalloutView::get_userData_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<dynamic>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_userData_batch(List<dynamic> userData) async {
    await kAmapMapFluttifyChannel.invokeMethod('MACustomCalloutView::set_userData_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "userData": userData[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<dynamic>> initWithCustomView_batch(List<UIView?> customView) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('MACustomCalloutView::initWithCustomView_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"customView": customView[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<dynamic>().toList();
  }
  
  //endregion
}
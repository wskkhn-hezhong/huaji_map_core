// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:huaji_map_core/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';
import 'package:amap_core_fluttify/amap_core_fluttify.dart';
import 'package:amap_search_fluttify/amap_search_fluttify.dart';
import 'package:amap_location_fluttify/amap_location_fluttify.dart';

class MAOverlayPathRenderer extends MAOverlayRenderer  {
  //region constants
  static const String name__ = 'MAOverlayPathRenderer';

  @override
  final String tag__ = 'huaji_map_core';

  
  //endregion

  //region creators
  static Future<MAOverlayPathRenderer> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createMAOverlayPathRenderer',
      {'init': init}
    );
    return AmapMapFluttifyIOSAs<MAOverlayPathRenderer>(__result__)!;
  }
  
  static Future<List<MAOverlayPathRenderer>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchMAOverlayPathRenderer',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => AmapMapFluttifyIOSAs<MAOverlayPathRenderer>(it))
        .where((element) => element !=null)
        .cast<MAOverlayPathRenderer>()
        .toList() ?? <MAOverlayPathRenderer>[];
  }
  
  //endregion

  //region getters
  Future<UIColor?> get_fillColor() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_fillColor", {'__this__': this});
    return AmapMapFluttifyIOSAs<UIColor>(__result__);
  }
  
  Future<UIColor?> get_strokeColor() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_strokeColor", {'__this__': this});
    return AmapMapFluttifyIOSAs<UIColor>(__result__);
  }
  
  Future<double?> get_lineWidth() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_lineWidth", {'__this__': this});
    return __result__;
  }
  
  Future<MALineJoinType?> get_lineJoinType() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_lineJoinType", {'__this__': this});
    return (__result__ as int).toMALineJoinType();
  }
  
  Future<MALineCapType?> get_lineCapType() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_lineCapType", {'__this__': this});
    return (__result__ as int).toMALineCapType();
  }
  
  Future<double?> get_miterLimit() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_miterLimit", {'__this__': this});
    return __result__;
  }
  
  Future<MALineDashType?> get_lineDashType() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_lineDashType", {'__this__': this});
    return (__result__ as int).toMALineDashType();
  }
  
  //endregion

  //region setters
  Future<void> set_fillColor(UIColor? fillColor) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_fillColor', <String, dynamic>{'__this__': this, "fillColor": fillColor});
  }
  
  Future<void> set_strokeColor(UIColor? strokeColor) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_strokeColor', <String, dynamic>{'__this__': this, "strokeColor": strokeColor});
  }
  
  Future<void> set_lineWidth(double? lineWidth) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_lineWidth', <String, dynamic>{'__this__': this, "lineWidth": lineWidth});
  }
  
  Future<void> set_lineJoinType(MALineJoinType? lineJoinType) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_lineJoinType', <String, dynamic>{'__this__': this, "lineJoinType": lineJoinType?.toValue()});
  }
  
  Future<void> set_lineCapType(MALineCapType? lineCapType) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_lineCapType', <String, dynamic>{'__this__': this, "lineCapType": lineCapType?.toValue()});
  }
  
  Future<void> set_miterLimit(double? miterLimit) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_miterLimit', <String, dynamic>{'__this__': this, "miterLimit": miterLimit});
  }
  
  Future<void> set_lineDashType(MALineDashType? lineDashType) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_lineDashType', <String, dynamic>{'__this__': this, "lineDashType": lineDashType?.toValue()});
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'MAOverlayPathRenderer{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension MAOverlayPathRenderer_Batch on List<MAOverlayPathRenderer?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  Future<List<UIColor?>> get_fillColor_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_fillColor_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => AmapMapFluttifyIOSAs<UIColor>(__result__)).cast<UIColor?>().toList();
  }
  
  Future<List<UIColor?>> get_strokeColor_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_strokeColor_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => AmapMapFluttifyIOSAs<UIColor>(__result__)).cast<UIColor?>().toList();
  }
  
  Future<List<double?>> get_lineWidth_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_lineWidth_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<double?>().toList();
  }
  
  Future<List<MALineJoinType?>> get_lineJoinType_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_lineJoinType_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toMALineJoinType()).cast<MALineJoinType?>().toList();
  }
  
  Future<List<MALineCapType?>> get_lineCapType_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_lineCapType_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toMALineCapType()).cast<MALineCapType?>().toList();
  }
  
  Future<List<double?>> get_miterLimit_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_miterLimit_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<double?>().toList();
  }
  
  Future<List<MALineDashType?>> get_lineDashType_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAOverlayPathRenderer::get_lineDashType_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toMALineDashType()).cast<MALineDashType?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_fillColor_batch(List<UIColor?> fillColor) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_fillColor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "fillColor": fillColor[__i__]}]);
  
  
  }
  
  Future<void> set_strokeColor_batch(List<UIColor?> strokeColor) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_strokeColor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "strokeColor": strokeColor[__i__]}]);
  
  
  }
  
  Future<void> set_lineWidth_batch(List<double?> lineWidth) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_lineWidth_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "lineWidth": lineWidth[__i__]}]);
  
  
  }
  
  Future<void> set_lineJoinType_batch(List<MALineJoinType?> lineJoinType) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_lineJoinType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "lineJoinType": lineJoinType[__i__]?.toValue()}]);
  
  
  }
  
  Future<void> set_lineCapType_batch(List<MALineCapType?> lineCapType) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_lineCapType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "lineCapType": lineCapType[__i__]?.toValue()}]);
  
  
  }
  
  Future<void> set_miterLimit_batch(List<double?> miterLimit) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_miterLimit_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "miterLimit": miterLimit[__i__]}]);
  
  
  }
  
  Future<void> set_lineDashType_batch(List<MALineDashType?> lineDashType) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAOverlayPathRenderer::set_lineDashType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "lineDashType": lineDashType[__i__]?.toValue()}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}
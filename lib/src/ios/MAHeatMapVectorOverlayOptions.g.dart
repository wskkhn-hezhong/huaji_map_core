// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:huaji_map_core/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';
import 'package:amap_core_fluttify/amap_core_fluttify.dart';
import 'package:amap_search_fluttify/amap_search_fluttify.dart';
import 'package:amap_location_fluttify/amap_location_fluttify.dart';

class MAHeatMapVectorOverlayOptions extends NSObject  {
  //region constants
  static const String name__ = 'MAHeatMapVectorOverlayOptions';

  @override
  final String tag__ = 'huaji_map_core';

  
  //endregion

  //region creators
  static Future<MAHeatMapVectorOverlayOptions> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createMAHeatMapVectorOverlayOptions',
      {'init': init}
    );
    return AmapMapFluttifyIOSAs<MAHeatMapVectorOverlayOptions>(__result__)!;
  }
  
  static Future<List<MAHeatMapVectorOverlayOptions>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchMAHeatMapVectorOverlayOptions',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => AmapMapFluttifyIOSAs<MAHeatMapVectorOverlayOptions>(it))
        .where((element) => element !=null)
        .cast<MAHeatMapVectorOverlayOptions>()
        .toList() ?? <MAHeatMapVectorOverlayOptions>[];
  }
  
  //endregion

  //region getters
  Future<MAHeatMapType?> get_type() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_type", {'__this__': this});
    return (__result__ as int).toMAHeatMapType();
  }
  
  Future<bool?> get_visible() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_visible", {'__this__': this});
    return __result__;
  }
  
  Future<List<MAHeatMapVectorNode>?> get_inputNodes() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_inputNodes", {'__this__': this});
    return (__result__ as List?)?.map((it) => AmapMapFluttifyIOSAs<MAHeatMapVectorNode>(it)).where((e) => e != null).cast<MAHeatMapVectorNode>().toList();
  }
  
  Future<double?> get_size() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_size", {'__this__': this});
    return __result__;
  }
  
  Future<double?> get_gap() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_gap", {'__this__': this});
    return __result__;
  }
  
  Future<List<UIColor>?> get_colors() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_colors", {'__this__': this});
    return (__result__ as List?)?.map((it) => AmapMapFluttifyIOSAs<UIColor>(it)).where((e) => e != null).cast<UIColor>().toList();
  }
  
  Future<List<num>?> get_startPoints() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_startPoints", {'__this__': this});
    return (__result__ as List?)?.cast<num>();
  }
  
  Future<double?> get_opacity() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_opacity", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_type(MAHeatMapType? type) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_type', <String, dynamic>{'__this__': this, "type": type?.toValue()});
  }
  
  Future<void> set_visible(bool? visible) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_visible', <String, dynamic>{'__this__': this, "visible": visible});
  }
  
  Future<void> set_inputNodes(List<MAHeatMapVectorNode>? inputNodes) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_inputNodes', <String, dynamic>{'__this__': this, "inputNodes": inputNodes});
  }
  
  Future<void> set_size(double? size) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_size', <String, dynamic>{'__this__': this, "size": size});
  }
  
  Future<void> set_gap(double? gap) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_gap', <String, dynamic>{'__this__': this, "gap": gap});
  }
  
  Future<void> set_colors(List<UIColor>? colors) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_colors', <String, dynamic>{'__this__': this, "colors": colors});
  }
  
  Future<void> set_startPoints(List<num>? startPoints) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_startPoints', <String, dynamic>{'__this__': this, "startPoints": startPoints});
  }
  
  Future<void> set_opacity(double? opacity) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_opacity', <String, dynamic>{'__this__': this, "opacity": opacity});
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'MAHeatMapVectorOverlayOptions{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension MAHeatMapVectorOverlayOptions_Batch on List<MAHeatMapVectorOverlayOptions?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  Future<List<MAHeatMapType?>> get_type_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_type_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toMAHeatMapType()).cast<MAHeatMapType?>().toList();
  }
  
  Future<List<bool?>> get_visible_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_visible_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  Future<List<List<MAHeatMapVectorNode>?>> get_inputNodes_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_inputNodes_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as List?)?.map((it) => AmapMapFluttifyIOSAs<MAHeatMapVectorNode>(it)).where((e) => e != null).cast<MAHeatMapVectorNode>().toList()).cast<List<MAHeatMapVectorNode>?>().toList();
  }
  
  Future<List<double?>> get_size_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_size_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<double?>().toList();
  }
  
  Future<List<double?>> get_gap_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_gap_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<double?>().toList();
  }
  
  Future<List<List<UIColor>?>> get_colors_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_colors_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as List?)?.map((it) => AmapMapFluttifyIOSAs<UIColor>(it)).where((e) => e != null).cast<UIColor>().toList()).cast<List<UIColor>?>().toList();
  }
  
  Future<List<List<num>?>> get_startPoints_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_startPoints_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as List?)?.cast<num>()).cast<List<num>?>().toList();
  }
  
  Future<List<double?>> get_opacity_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAHeatMapVectorOverlayOptions::get_opacity_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<double?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_type_batch(List<MAHeatMapType?> type) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_type_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "type": type[__i__]?.toValue()}]);
  
  
  }
  
  Future<void> set_visible_batch(List<bool?> visible) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_visible_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "visible": visible[__i__]}]);
  
  
  }
  
  Future<void> set_inputNodes_batch(List<List<MAHeatMapVectorNode>?> inputNodes) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_inputNodes_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "inputNodes": inputNodes[__i__]}]);
  
  
  }
  
  Future<void> set_size_batch(List<double?> size) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_size_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "size": size[__i__]}]);
  
  
  }
  
  Future<void> set_gap_batch(List<double?> gap) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_gap_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "gap": gap[__i__]}]);
  
  
  }
  
  Future<void> set_colors_batch(List<List<UIColor>?> colors) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_colors_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "colors": colors[__i__]}]);
  
  
  }
  
  Future<void> set_startPoints_batch(List<List<num>?> startPoints) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_startPoints_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "startPoints": startPoints[__i__]}]);
  
  
  }
  
  Future<void> set_opacity_batch(List<double?> opacity) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAHeatMapVectorOverlayOptions::set_opacity_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "opacity": opacity[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}
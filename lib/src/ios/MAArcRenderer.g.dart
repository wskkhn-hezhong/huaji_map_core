// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:huaji_map_core/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';
import 'package:amap_core_fluttify/amap_core_fluttify.dart';
import 'package:amap_search_fluttify/amap_search_fluttify.dart';
import 'package:amap_location_fluttify/amap_location_fluttify.dart';

class MAArcRenderer extends MAOverlayPathRenderer  {
  //region constants
  static const String name__ = 'MAArcRenderer';

  @override
  final String tag__ = 'huaji_map_core';

  
  //endregion

  //region creators
  static Future<MAArcRenderer> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createMAArcRenderer',
      {'init': init}
    );
    return AmapMapFluttifyIOSAs<MAArcRenderer>(__result__)!;
  }
  
  static Future<List<MAArcRenderer>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchMAArcRenderer',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => AmapMapFluttifyIOSAs<MAArcRenderer>(it))
        .where((element) => element !=null)
        .cast<MAArcRenderer>()
        .toList() ?? <MAArcRenderer>[];
  }
  
  //endregion

  //region getters
  Future<MAArc?> get_arc() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAArcRenderer::get_arc", {'__this__': this});
    return AmapMapFluttifyIOSAs<MAArc>(__result__);
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<MAArcRenderer?> initWithArc(MAArc? arc) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: MAArcRenderer@$refId::initWithArc([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('MAArcRenderer::initWithArc', {"arc": arc, "__this__": this});
  
  
    // handle native call
  
  
    return AmapMapFluttifyIOSAs<MAArcRenderer>(__result__);
  }
  
  //endregion

  @override
  String toString() {
    return 'MAArcRenderer{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension MAArcRenderer_Batch on List<MAArcRenderer?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  Future<List<MAArc?>> get_arc_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAArcRenderer::get_arc_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => AmapMapFluttifyIOSAs<MAArc>(__result__)).cast<MAArc?>().toList();
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<MAArcRenderer?>> initWithArc_batch(List<MAArc?> arc) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('MAArcRenderer::initWithArc_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"arc": arc[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => AmapMapFluttifyIOSAs<MAArcRenderer>(__result__)).cast<MAArcRenderer?>().toList();
  }
  
  //endregion
}
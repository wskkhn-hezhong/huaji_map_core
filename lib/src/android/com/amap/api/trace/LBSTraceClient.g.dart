// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:huaji_map_core/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';
import 'package:amap_core_fluttify/amap_core_fluttify.dart';
import 'package:amap_search_fluttify/amap_search_fluttify.dart';
import 'package:amap_location_fluttify/amap_location_fluttify.dart';

class com_amap_api_trace_LBSTraceClient extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.amap.api.trace.LBSTraceClient';

  @override
  final String tag__ = 'huaji_map_core';

  static final int TYPE_AMAP = 1;
  static final int TYPE_GPS = 2;
  static final int TYPE_BAIDU = 3;
  static final String MIN_GRASP_POINT_ERROR = "轨迹点太少或距离太近,轨迹纠偏失败";
  static final String LOCATE_TIMEOUT_ERROR = "定位超时";
  static final String TRACE_SUCCESS = "纠偏成功";
  //endregion

  //region creators
  static Future<com_amap_api_trace_LBSTraceClient> create__android_content_Context(android_content_Context? var1) async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createcom_amap_api_trace_LBSTraceClient__android_content_Context',
      {"var1": var1}
    );
    return AmapMapFluttifyAndroidAs<com_amap_api_trace_LBSTraceClient>(__result__)!;
  }
  
  static Future<List<com_amap_api_trace_LBSTraceClient>> create_batch__android_content_Context(List<android_content_Context?> var1) async {
    assert(true);
    final __result_batch__ = await  kAmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcom_amap_api_trace_LBSTraceClient__android_content_Context',
      [for (int __i__ = 0; __i__ < var1.length; __i__++) {"var1": var1[__i__]}]
    );
    return __result_batch__
        ?.map((it) => AmapMapFluttifyAndroidAs<com_amap_api_trace_LBSTraceClient>(it))
        .where((element) => element !=null)
        .cast<com_amap_api_trace_LBSTraceClient>()
        .toList() ?? <com_amap_api_trace_LBSTraceClient>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<com_amap_api_trace_LBSTraceClient?> getInstance(android_content_Context? var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.amap.api.trace.LBSTraceClient::getInstance([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('com.amap.api.trace.LBSTraceClient::getInstance', {"var0": var0});
  
  
    // handle native call
  
  
    return AmapMapFluttifyAndroidAs<com_amap_api_trace_LBSTraceClient>(__result__);
  }
  
  
  Future<void> queryProcessedTrace(int? var1, List<com_amap_api_trace_TraceLocation>? var2, int? var3, com_amap_api_trace_TraceListener? var4) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.amap.api.trace.LBSTraceClient@$refId::queryProcessedTrace([\'var1\':$var1, \'var3\':$var3])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('com.amap.api.trace.LBSTraceClient::queryProcessedTrace', {"var1": var1, "var2": var2, "var3": var3, "var4": var4, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> startTrace(com_amap_api_trace_TraceStatusListener? var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.amap.api.trace.LBSTraceClient@$refId::startTrace([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('com.amap.api.trace.LBSTraceClient::startTrace', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> stopTrace() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.amap.api.trace.LBSTraceClient@$refId::stopTrace([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('com.amap.api.trace.LBSTraceClient::stopTrace', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> destroy() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.amap.api.trace.LBSTraceClient@$refId::destroy([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('com.amap.api.trace.LBSTraceClient::destroy', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'com_amap_api_trace_LBSTraceClient{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_amap_api_trace_LBSTraceClient_Batch on List<com_amap_api_trace_LBSTraceClient?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<com_amap_api_trace_LBSTraceClient?>> getInstance_batch(List<android_content_Context?> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('com.amap.api.trace.LBSTraceClient::getInstance_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => AmapMapFluttifyAndroidAs<com_amap_api_trace_LBSTraceClient>(__result__)).cast<com_amap_api_trace_LBSTraceClient?>().toList();
  }
  
  
  Future<List<void>> stopTrace_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('com.amap.api.trace.LBSTraceClient::stopTrace_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> destroy_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('com.amap.api.trace.LBSTraceClient::destroy_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}
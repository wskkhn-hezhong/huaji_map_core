// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:huaji_map_core/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';
import 'package:amap_core_fluttify/amap_core_fluttify.dart';
import 'package:amap_search_fluttify/amap_search_fluttify.dart';
import 'package:amap_location_fluttify/amap_location_fluttify.dart';

class MAMultiTexturePolylineRenderer extends MAPolylineRenderer  {
  //region constants
  static const String name__ = 'MAMultiTexturePolylineRenderer';

  @override
  final String tag__ = 'huaji_map_core';

  
  //endregion

  //region creators
  static Future<MAMultiTexturePolylineRenderer> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod(
      'ObjectFactory::createMAMultiTexturePolylineRenderer',
      {'init': init}
    );
    return AmapMapFluttifyIOSAs<MAMultiTexturePolylineRenderer>(__result__)!;
  }
  
  static Future<List<MAMultiTexturePolylineRenderer>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kAmapMapFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchMAMultiTexturePolylineRenderer',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => AmapMapFluttifyIOSAs<MAMultiTexturePolylineRenderer>(it))
        .where((element) => element !=null)
        .cast<MAMultiTexturePolylineRenderer>()
        .toList() ?? <MAMultiTexturePolylineRenderer>[];
  }
  
  //endregion

  //region getters
  Future<MAMultiPolyline?> get_multiPolyline() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAMultiTexturePolylineRenderer::get_multiPolyline", {'__this__': this});
    return AmapMapFluttifyIOSAs<MAMultiPolyline>(__result__);
  }
  
  Future<List<UIImage>?> get_strokeTextureImages() async {
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod("MAMultiTexturePolylineRenderer::get_strokeTextureImages", {'__this__': this});
    return (__result__ as List?)?.map((it) => AmapMapFluttifyIOSAs<UIImage>(it)).where((e) => e != null).cast<UIImage>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_strokeTextureImages(List<UIImage>? strokeTextureImages) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAMultiTexturePolylineRenderer::set_strokeTextureImages', <String, dynamic>{'__this__': this, "strokeTextureImages": strokeTextureImages});
  }
  
  //endregion

  //region methods
  
  Future<MAMultiTexturePolylineRenderer?> initWithMultiPolyline(MAMultiPolyline? multiPolyline) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: MAMultiTexturePolylineRenderer@$refId::initWithMultiPolyline([])');
    }
  
    // invoke native method
    final __result__ = await kAmapMapFluttifyChannel.invokeMethod('MAMultiTexturePolylineRenderer::initWithMultiPolyline', {"multiPolyline": multiPolyline, "__this__": this});
  
  
    // handle native call
  
  
    return AmapMapFluttifyIOSAs<MAMultiTexturePolylineRenderer>(__result__);
  }
  
  //endregion

  @override
  String toString() {
    return 'MAMultiTexturePolylineRenderer{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension MAMultiTexturePolylineRenderer_Batch on List<MAMultiTexturePolylineRenderer?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  Future<List<MAMultiPolyline?>> get_multiPolyline_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAMultiTexturePolylineRenderer::get_multiPolyline_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => AmapMapFluttifyIOSAs<MAMultiPolyline>(__result__)).cast<MAMultiPolyline?>().toList();
  }
  
  Future<List<List<UIImage>?>> get_strokeTextureImages_batch() async {
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod("MAMultiTexturePolylineRenderer::get_strokeTextureImages_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as List?)?.map((it) => AmapMapFluttifyIOSAs<UIImage>(it)).where((e) => e != null).cast<UIImage>().toList()).cast<List<UIImage>?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_strokeTextureImages_batch(List<List<UIImage>?> strokeTextureImages) async {
    await kAmapMapFluttifyChannel.invokeMethod('MAMultiTexturePolylineRenderer::set_strokeTextureImages_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "strokeTextureImages": strokeTextureImages[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<MAMultiTexturePolylineRenderer?>> initWithMultiPolyline_batch(List<MAMultiPolyline?> multiPolyline) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kAmapMapFluttifyChannel.invokeMethod('MAMultiTexturePolylineRenderer::initWithMultiPolyline_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"multiPolyline": multiPolyline[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => AmapMapFluttifyIOSAs<MAMultiTexturePolylineRenderer>(__result__)).cast<MAMultiTexturePolylineRenderer?>().toList();
  }
  
  //endregion
}